import { PlatformAccessory, CharacteristicValue, CharacteristicSetCallback, CharacteristicGetCallback } from 'homebridge';
import { MideaPlatform } from './MideaPlatform';
import { MideaDeviceType } from './enums/MideaDeviceType';
import { MideaSwingMode } from './enums/MideaSwingMode';
export declare class MideaAccessory {
    private readonly platform;
    private readonly accessory;
    private _deviceId;
    private _deviceType;
    private _name;
    private _address;
    deviceId: string;
    deviceType: MideaDeviceType;
    targetTemperature: any;
    indoorTemperature: number;
    outdoorTemperature: number;
    useFahrenheit: boolean;
    ecoMode: boolean;
    turboMode: boolean;
    turboFan: boolean;
    purifier: boolean;
    dryer: boolean;
    comfortSleep: boolean;
    showScreen: boolean;
    currentHumidity: number;
    targetHumidity: any;
    tankLevel: number;
    powerState: any;
    beepPrompt: boolean;
    operationalMode: number;
    fanSpeed: number;
    verticalSwing: boolean;
    horizontalSwing: boolean;
    fanOnlyMode: boolean;
    temperatureSteps: number;
    minTemperature: number;
    maxTemperature: number;
    supportedSwingMode: MideaSwingMode;
    name: string;
    model: string;
    address: string;
    firmwareVersion: any;
    private service;
    private fanService;
    private outdoorTemperatureService;
    constructor(platform: MideaPlatform, accessory: PlatformAccessory, _deviceId: string, _deviceType: MideaDeviceType, _name: string, _address: string);
    handleActiveGet(callback: CharacteristicGetCallback): void;
    handleActiveSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    currentHeaterCoolerState(): 0 | 2 | 3;
    handleCurrentHeaterCoolerStateGet(callback: CharacteristicGetCallback): void;
    targetHeaterCoolerState(): 1 | 0 | 2;
    handleTargetHeaterCoolerStateGet(callback: CharacteristicGetCallback): void;
    handleTargetHeaterCoolerStateSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    handleCurrentTemperatureGet(callback: CharacteristicGetCallback): void;
    handleThresholdTemperatureGet(callback: CharacteristicGetCallback): void;
    handleThresholdTemperatureSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    rotationSpeed(): number;
    handleRotationSpeedGet(callback: CharacteristicGetCallback): void;
    handleRotationSpeedSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    SwingMode(): 1 | 0;
    handleSwingModeGet(callback: CharacteristicGetCallback): void;
    handleSwingModeSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    handleTemperatureDisplayUnitsGet(callback: CharacteristicGetCallback): void;
    handleTemperatureDisplayUnitsSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    fanActive(): 1 | 0;
    handleFanActiveGet(callback: CharacteristicGetCallback): void;
    handleFanActiveSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    handleOutdoorTemperatureGet(callback: CharacteristicGetCallback): void;
    currentHumidifierDehumidifierState(): 0 | 3 | undefined;
    handleCurrentHumidifierDehumidifierStateGet(callback: CharacteristicGetCallback): void;
    TargetHumidifierDehumidifierState(): 2 | undefined;
    handleTargetHumidifierDehumidifierStateGet(callback: CharacteristicGetCallback): void;
    handleTargetHumidifierDehumidifierStateSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    handleCurrentRelativeHumidityGet(callback: CharacteristicGetCallback): void;
    handleRelativeHumidityDehumidifierThresholdGet(callback: CharacteristicGetCallback): void;
    handleRelativeHumidityDehumidifierThresholdSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    handleRelativeHumidityHumidifierThresholdGet(callback: CharacteristicGetCallback): void;
    handleRelativeHumidityHumidifierThresholdSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    windSpeed(): number;
    handleWindSpeedGet(callback: CharacteristicGetCallback): void;
    handleWindSpeedSet(value: CharacteristicValue, callback: CharacteristicSetCallback): void;
    handleWaterLevelGet(callback: CharacteristicGetCallback): void;
}
//# sourceMappingURL=MideaAccessory.d.ts.map